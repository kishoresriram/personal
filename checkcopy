using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Windows.Forms;
using System.Resources;
using System.Collections;
using System.Data;
using System.Xml.Linq;

namespace joaInternationalizationValidator
{
    class ResourceCopy
    {
        int count = 0;
        internal void copyResourceStrings(string solutionFullPath)
        {
            ManagedResourceStringsCopy(solutionFullPath);
            //unManagedResourceStringsCopy(solutionFullPath);
            MessageBox.Show(count.ToString());
        }

        private void ManagedResourceStringsCopy(string solutionFullPath)
        {
            string solutionDirPath = Path.GetDirectoryName(solutionFullPath);
            string solutionName = Path.GetFileName(solutionFullPath);
            string localizationresourceFullPath = null;

            #region Localization-Resources
            string[] localizationResFiles = Directory.GetFiles(solutionDirPath, @"Resources.resx", SearchOption.AllDirectories);
            if (localizationResFiles.Length > 0)
            {
                foreach (var resfile in localizationResFiles)
                {
                    if (resfile.EndsWith(@"Localization\Resources.resx", StringComparison.InvariantCultureIgnoreCase))
                    {
                        localizationresourceFullPath = resfile;
                    }
                }
                if (localizationresourceFullPath != null)
                {
                    string localizationresDir = Path.GetDirectoryName(localizationresourceFullPath);
                    string localizationChineseResFile = Directory.GetFiles(localizationresDir, "Resources.zh-CN.resx", SearchOption.AllDirectories).FirstOrDefault();
                    Dictionary<string, string> chineseResDict = new Dictionary<string, string>();
                    ResXResourceReader engReader = new ResXResourceReader(localizationresourceFullPath);
                    ResXResourceReader chineseReader = new ResXResourceReader(localizationChineseResFile);
                    ResXResourceWriter chineseResWriter = new ResXResourceWriter(localizationChineseResFile);

                    IDictionaryEnumerator chineseEnum = chineseReader.GetEnumerator();
                    foreach (DictionaryEntry chinese in chineseReader)
                    {
                        if (chinese.Key.ToString() != null || chinese.Key.ToString() != "")
                        {
                            chineseResDict.Add(chinese.Key.ToString(), chinese.Value.ToString());

                            //Write (with read to keep xml file order)
                            chineseResWriter.AddResource(chinese.Key.ToString(), chinese.Value.ToString());
                        }
                    }

                    IDictionaryEnumerator engEnum = engReader.GetEnumerator();
                    foreach (DictionaryEntry eng in engReader)
                    {
                        if (!chineseResDict.ContainsKey(eng.Key.ToString()))
                        {
                            chineseResWriter.AddResource(eng.Key.ToString(), eng.Value.ToString());
                        }
                    }

                    //Write to file
                    chineseResWriter.Generate();
                    chineseResWriter.Close();

                    chineseReader.Close();
                    engReader.Close();
                }
            }
            else
            {
                MessageBox.Show("No Resourcefile in Localization Folder", "Alert");
            }
            #endregion

            #region winform-Resources

            string[] winformResFiles = Directory.GetFiles(solutionDirPath, "*.resx", SearchOption.AllDirectories).Where(name => !name.EndsWith(@".zh-CN.resx") && !name.EndsWith(@"Resources.resx")).ToArray();

            foreach (var winFile in winformResFiles)
            {
                CopyWinFormResStrings(winFile);
            }

            #endregion
        }

        private void CopyWinFormResStrings(string winFile)
        {
            string resfilePath = winFile;
            //resfilePath = @"D:\Code32\Jewel.Release.Yuma.Internationalization\joaJewelDataIO\1.0\joaJewelDataIO\Workflow\DataCreate\TabPages\joaPolyLineSetDataCreateUserControl.resx";
            string resfileDir = Path.GetDirectoryName(resfilePath);
            string resfileNameWithoutExt = Path.GetFileNameWithoutExtension(resfilePath);
            string ChineseWinFormResFile = Directory.GetFiles(resfileDir, resfileNameWithoutExt + ".zh-CN.resx", SearchOption.AllDirectories).FirstOrDefault();

            

            if (File.Exists(resfilePath) && (File.Exists(resfileDir + "\\" + resfileNameWithoutExt + ".cs")) && ChineseWinFormResFile != null)
            {
                ResXResourceReader engWinformresReader = new ResXResourceReader(resfilePath);
                ResXResourceReader chiWinformresReader = new ResXResourceReader(ChineseWinFormResFile);
                //Check if this will erase the old file.
                ResXResourceWriter chiWinformresWriter = null;// new ResXResourceWriter(ChineseWinFormResFile);
                Dictionary<string, string> chineseWinFormDict = new Dictionary<string, string>();
                try
                {
                    chiWinformresWriter = new ResXResourceWriter(ChineseWinFormResFile);
                    IDictionaryEnumerator chineseWinEnum = chiWinformresReader.GetEnumerator();
                    foreach (DictionaryEntry chinese in chiWinformresReader)
                    {

                        if (chinese.Value.GetType().FullName.ToString() == "System.String")
                        {
                            chineseWinFormDict.Add(chinese.Key.ToString(), chinese.Value.ToString());
                            //Write (with read to keep xml file order)
                            chiWinformresWriter.AddResource(chinese.Key.ToString(), chinese.Value.ToString());
                        }
                        else
                        {
                            string ch = chinese.Value.ToString();
                            chiWinformresWriter.AddResource(chinese.Key.ToString(), chinese.Value);
                        }
                    }
                }
                catch (Exception ex)
                {
                    //if (chiWinformresWriter != null)
                    //{
                    //    chiWinformresWriter.Close();
                    //    chiWinformresWriter.Dispose();
                    //}
                    chineseWinFormDict = new Dictionary<string, string>();
                    XDocument xdoc = XDocument.Load(ChineseWinFormResFile, LoadOptions.None);
                    IEnumerable<XElement> dataElements = xdoc.Descendants("data");
                    foreach (XElement dataElement in dataElements)
                    {
                        //Skipping Resource Key values starting with >> and having data type
                        if (!(dataElement.LastAttribute.Name.LocalName.ToString() == "type" || dataElement.LastAttribute.PreviousAttribute.Name.LocalName.ToString() == "type"))
                        {
                            //if (!dataElement.FirstAttribute.Value.StartsWith(">>") && (!dataElement.FirstAttribute.Value.ToString().StartsWith("$"))
                            //        && !dataElement.FirstAttribute.Value.ToString().Contains("UnitLabel")
                            //        && !dataElement.FirstAttribute.Value.ToString().Contains(".Dock")
                            //        && !dataElement.FirstAttribute.Value.ToString().Contains(".TextAlign"))
                            //{
                            //if (!chineseWinFormDict.ContainsKey(dataElement.FirstAttribute.Value.ToString()))
                            //{
                            string key = dataElement.FirstAttribute.Value;
                            string value = dataElement.Value.ToString().Replace("\n", string.Empty).Replace(" ", string.Empty);
                            //string keyvalue = key + " " + value;
                            //count++;
                            //Adding in to Dictionary - To create a dictionary to evaluate.
                            chineseWinFormDict.Add(key, value);
                            //chiWinformresWriter.AddResource(dataElement.FirstAttribute.Value.ToString(), dataElement.Value.ToString().Replace("\n", string.Empty).Replace(" ", string.Empty));
                            //}
                            //}
                        }
                        //else
                        //{
                        //    chiWinformresWriter.AddResource(dataElement.FirstAttribute.Value.ToString(), dataElement.LastAttribute);
                        //}

                    }
                }


                try
                {
                    if (chiWinformresWriter == null)
                    {
                        chiWinformresWriter = new ResXResourceWriter(ChineseWinFormResFile);
                    }
                    foreach (DictionaryEntry eng in engWinformresReader)
                    {
                        if (eng.Value.GetType().FullName.ToString() == "System.String")
                        {
                            if (!eng.Key.ToString().StartsWith(">>") && (!eng.Key.ToString().StartsWith("$")) && !eng.Key.ToString().Contains("UnitLabel") && !eng.Key.ToString().Contains(".Dock") && !eng.Key.ToString().Contains(".TextAlign"))
                            {
                                if (!chineseWinFormDict.ContainsKey(eng.Key.ToString()))
                                {
                                    chiWinformresWriter.AddResource(eng.Key.ToString(), eng.Value.ToString());
                                    string key = eng.Key.ToString();
                                    string value = eng.Value.ToString();
                                    string keyvalue = key + " " + value;
                                    count++;
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    //if (chiWinformresWriter != null)
                    //{
                    //    chiWinformresWriter.Close();
                    //    chiWinformresWriter.Dispose();
                    //}
                    XDocument xdoc = XDocument.Load(resfilePath, LoadOptions.None);
                    IEnumerable<XElement> dataElements = xdoc.Descendants("data");
                    string xmlWrite = null;
                    var lastLine = File.ReadLines(ChineseWinFormResFile).Count();
                    foreach (XElement dataElement in dataElements)
                    {
                        //Skipping Resource Key values starting with >> and having data type
                        if (!(dataElement.LastAttribute.Name.LocalName.ToString() == "type" || dataElement.LastAttribute.PreviousAttribute.Name.LocalName.ToString() == "type"))
                        {
                            if (!dataElement.FirstAttribute.Value.StartsWith(">>") && (!dataElement.FirstAttribute.Value.ToString().StartsWith("$"))
                                    && !dataElement.FirstAttribute.Value.ToString().Contains("UnitLabel")
                                    && !dataElement.FirstAttribute.Value.ToString().Contains(".Dock")
                                    && !dataElement.FirstAttribute.Value.ToString().Contains(".TextAlign"))
                            {
                                if (!chineseWinFormDict.ContainsKey(dataElement.FirstAttribute.Value.ToString()))
                                {
                                    //System.Drawing.Bitmap value1;
                                    string key = dataElement.FirstAttribute.Value;
                                    string value = dataElement.Value.ToString().Replace("\n", string.Empty).Replace(" ", string.Empty);
                                    //writing in to file - create a string and write to a file.
                                    xmlWrite = "  <data name=\""+ key +"\" xml:space=\"preserve\">" + System.Environment.NewLine;
                                    xmlWrite += "    <value>" + value + "</value>" + System.Environment.NewLine + "  </data>" + System.Environment.NewLine;
                                    //string keyvalue = key + " " + value;
                                    //count++;
                                    //chiWinformresWriter.AddResource(dataElement.FirstAttribute.Value.ToString(), dataElement.Value.ToString().Replace("\n", string.Empty).Replace(" ", string.Empty));
                                }
                            }
                        }
                        //else
                        //{
                        //chiWinformresWriter.AddResource(dataElement.FirstAttribute.Value.ToString(), dataElement.LastAttribute);
                        //}

                    }
                    if (xmlWrite != null)
                    {
                        createEntry(xmlWrite, ChineseWinFormResFile, int.Parse(lastLine.ToString()));
                    }
                }
                //Write to file
                //chiWinformresWriter.Generate();
                //chiWinformresWriter.Close();
            }

            //kishore


        }


        private void unManagedResourceStringsCopy(string solutionFullPath)
        {
            string solutionDirPath = Path.GetDirectoryName(solutionFullPath);
            string solutionName = Path.GetFileName(solutionFullPath);
            string engRCFullPath = null;
            int chineseRCWritePosition = 0;
            bool resMoved = false;
            string[] engrcFiles = Directory.GetFiles(solutionDirPath, "*_en_us.rc", SearchOption.AllDirectories);
            if (engrcFiles.Length > 0)
            {
                engRCFullPath = engrcFiles[0];
            }
            string chiRCFileFullPath = Directory.GetFiles(solutionDirPath, "*_zh_CN.rc", SearchOption.AllDirectories).FirstOrDefault();

            if (engRCFullPath != null && chiRCFileFullPath != null)
            {
                Dictionary<string, string> engResDictionary = new Dictionary<string, string>();
                Dictionary<string, string> chiResDictionary = new Dictionary<string, string>();
                engResDictionary = GenerateRCStringsDictionary(engRCFullPath, engResDictionary, out chineseRCWritePosition);
                chiResDictionary = GenerateRCStringsDictionary(chiRCFileFullPath, chiResDictionary, out chineseRCWritePosition);
                foreach (var eng in engResDictionary)
                {
                    if (!chiResDictionary.ContainsKey(eng.Key))
                    {
                        string newLineRC = "\t" + eng.Key + "\t\"" + eng.Value + "\"";
                        createEntry(newLineRC, chiRCFileFullPath, chineseRCWritePosition);
                        resMoved = true;
                    }
                }
                if (resMoved)
                {
                    File.Copy(Path.GetDirectoryName(engRCFullPath) + "\\resource.h", Path.GetDirectoryName(chiRCFileFullPath) + "\\resource.h", true);
                }
            }

        }

        private void createEntry(string newLineRC, string chiRCFileFullPath, int chineseRCWritePosition)
        {
            List<string> txtLines = new List<string>();

            //Fill a List<string> with the lines from the txt file.
            foreach (string str in File.ReadAllLines(chiRCFileFullPath))
            {
                txtLines.Add(str);
            }

            //Insert the line you want to add last under the tag 'item1'.
            txtLines.Insert(chineseRCWritePosition-1, newLineRC);

            //Clear the file. The using block will close the connection immediately.
            using (File.Create(chiRCFileFullPath)) { }
            FileInfo fi = new FileInfo(chiRCFileFullPath);
            using (TextWriter txtWriter = new StreamWriter(fi.Open(FileMode.Truncate)))
            {
            }

            foreach (string str in txtLines)
            {
                File.AppendAllText(chiRCFileFullPath, str + Environment.NewLine);
            }
        }

        private Dictionary<string, string> GenerateRCStringsDictionary(string rcFullPath, Dictionary<string, string> resDictionary, out int lastEnd)
        {
            string line;
            TextReader reader = File.OpenText(rcFullPath);
            Details details = new Details();
            lastEnd = 0;
            while ((line = reader.ReadLine()) != null)
            {
                if (line == "STRINGTABLE")
                {
                    line = reader.ReadLine();
                    try
                    {
                        while (!((line = reader.ReadLine()) == "END"))
                        {
                            string[] s1 = line.Split('"');
                            details.classKey = s1[0].Trim();
                            if (s1.Length > 01)
                                details.classValue = s1[1];
                            else
                            {
                                if (s1[0] != null && s1[0] != string.Empty && s1[0] != "")
                                {
                                    line = reader.ReadLine();
                                    while (line == null)
                                    {
                                        line = reader.ReadLine();
                                    }

                                    s1 = line.Split('"');
                                    if (s1.Length > 1)
                                        details.classValue = s1[1];
                                }
                                else
                                {
                                    details.classValue = null;
                                }
                            }

                            if (details.classValue != null)
                            {
                                resDictionary.Add(details.classKey, details.classValue);
                                details = new Details();
                            }
                        }
                    }
                    catch (Exception)
                    {
                    }
                }
            }

            TextReader file = File.OpenText(rcFullPath);

            int counter = 0;
            while ((line = file.ReadLine()) != null)
            {

                if (line.Trim() == "END")
                {
                    lastEnd = counter;
                }
                counter++;
            }
            file.Dispose();
            file.Close();
            reader.Dispose();
            reader.Close();
            return resDictionary;
        }
    }
    public class Details
    {
        public string classKey { get; set; }
        public string classValue { get; set; }
    }
}
